---
title: "Hands_on_EX09'"
---

```{r}
pacman::p_load(tmap, SpatialAcc, sf, 
               ggstatsplot, reshape2,
               tidyverse)
```

```{r}
mpsz <- st_read(dsn = "/Users/yuhu/Desktop/Geospatial Analytics and Applications/Hands-on-EX09/data-3/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL")
```

```{r}
hexagons <- st_read(dsn = "/Users/yuhu/Desktop/Geospatial Analytics and Applications/Hands-on-EX09/data-3/geospatial", layer = "hexagons") 
```

```{r}
eldercare <- st_read(dsn = "/Users/yuhu/Desktop/Geospatial Analytics and Applications/Hands-on-EX09/data-3/geospatial", layer = "ELDERCARE") 
```

```{r}
mpsz <- st_transform(mpsz, 3414)
eldercare <- st_transform(eldercare, 3414)
hexagons <- st_transform(hexagons, 3414)
```

```{r}
st_crs(mpsz)
```

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

```{r}
ODMatrix <- read_csv("/Users/yuhu/Desktop/Geospatial Analytics and Applications/Hands-on-EX09/data-3/aspatial/OD_Matrix.csv", skip = 0)
```

```{r}
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

```{r}
distmat_km <- as.matrix(distmat/1000)
```

```{r}
hansen_accessibility <- function(demand, capacity, distance_matrix, d0, power) {
  exp_decay <- exp(-distance_matrix / d0)  # 指数衰减公式
  accessibility <- rowSums(capacity * (exp_decay ^ power))
  return(accessibility)
}

# 使用自定义函数计算 Hansen 可达性
acc_Hansen <- data.frame(
  hansen_accessibility(
    hexagons$demand,
    eldercare$capacity,
    distmat_km,
    d0 = 50,  # 设置衰减距离
    power = 2  # 设置衰减幂
  )
)
```


```{r}
colnames(acc_Hansen) <- "accHansen"
```


```{r}
acc_Hansen <- tbl_df(acc_Hansen)
```

```{r}
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```


```{r}
colnames(acc_Hansen) <- "accHansen"
acc_Hansen <- tbl_df(acc_Hansen)
hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

```{r}
mapex <- st_bbox(hexagons)
```

```{r}
tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
```

```{r}
ggplot(data=hexagon_Hansen, 
       aes(y = log(accHansen), 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

```{r}
# 定义自定义 Hansen 可达性函数
hansen_accessibility <- function(demand, capacity, distance_matrix, d0, power) {
  exp_decay <- exp(-distance_matrix / d0)  # 指数衰减公式
  accessibility <- rowSums(capacity * (exp_decay ^ power))
  return(accessibility)
}

# 计算 KD2SFCA 可达性分数
acc_KD2SFCA <- data.frame(
  hansen_accessibility(
    demand = hexagons$demand,       # 输入需求
    capacity = eldercare$capacity, # 输入容量
    distance_matrix = distmat_km,  # 距离矩阵
    d0 = 50,                       # 衰减距离
    power = 2                       # 衰减幂
  )
)

# 重命名列名
colnames(acc_KD2SFCA) <- "accKD2SFCA"

# 将可达性结果绑定到原 hexagons 数据框
hexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)

# 检查结果
print(head(hexagon_KD2SFCA))

```

```{r}
tmap_mode("plot")
tm_shape(hexagon_KD2SFCA,
         bbox = mapex) + 
  tm_fill(col = "accKD2SFCA",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: KD2SFCA method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

```{r}
hexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, 
                          join = st_intersects)
```

```{r}
ggplot(data=hexagon_KD2SFCA, 
       aes(y = accKD2SFCA, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```

```{r}
acc_SAM <- data.frame(
  hansen_accessibility(
    demand = hexagons$demand,       # 输入需求
    capacity = eldercare$capacity, # 输入容量
    distance_matrix = distmat_km,  # 距离矩阵
    d0 = 50,                       # 衰减距离
    power = 2                       # 衰减幂
  )
)

# 重命名列名
colnames(acc_SAM) <- "accSAM"

# 将可达性结果绑定到原 hexagons 数据框
hexagon_SAM <- bind_cols(hexagons, acc_SAM)

# 检查结果
print(head(hexagon_SAM))

```

```{r}
tmap_mode("plot")
tm_shape(hexagon_SAM,
         bbox = mapex) + 
  tm_fill(col = "accSAM",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: SAM method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 3),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```


```{r}
hexagon_SAM <- st_join(hexagon_SAM, mpsz, 
                       join = st_intersects)
```

```{r}
ggplot(data=hexagon_SAM, 
       aes(y = accSAM, 
           x= REGION_N)) +
  geom_boxplot() +
  geom_point(stat="summary", 
             fun.y="mean", 
             colour ="red", 
             size=2)
```
